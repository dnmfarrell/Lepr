#!/usr/bin/perl
package Lepr;
use Scalar::Util 'looks_like_number';
use Storable qw(dclone);
use v5.16;
use warnings;

our $ENV = {
  print => sub { say stringify(@_); () }, # no return value
  atom  => sub { atom(@_) ? 1 : undef },
  cons  => sub { my $v=check_args('cons',['h','@l'],@_);
                 [$v->{h}, @{$v->{'@l'} // []}] },
  car   => sub { check_args('car',['@l'],@_); nil($_[0]) ? undef : $_[0]->[0]},
  cdr   => sub { my $v=check_args('car',['@l'],@_)->{'@l'};
                 $v && @$v > 1 ? [@$v[1..$#$v]] : undef },
  eq    => sub { equal(@_) ? 1 : undef },
  '++'  => sub { check_args('++',['@l','@m'],@_);[@{$_[0]//[]},@{$_[1]//[]}] },
  '=='  => sub { check_num_args('==', @_) && ($_[0] == $_[1] || undef) },
  '>='  => sub { check_num_args('>=', @_) && ($_[0] >= $_[1] || undef) },
  '<='  => sub { check_num_args('<=', @_) && ($_[0] <= $_[1] || undef) },
  '>'   => sub { check_num_args('>',  @_) && ($_[0] >  $_[1] || undef) },
  '<'   => sub { check_num_args('<',  @_) && ($_[0] <  $_[1] || undef) },
  '+'   => sub { check_num_args('+',  @_) && $_[0] +  $_[1] },
  '-'   => sub { check_num_args('-',  @_) && $_[0] -  $_[1] },
  '/'   => sub { check_num_args('/',  @_) && $_[0] /  $_[1] },
  '*'   => sub { check_num_args('*',  @_) && $_[0] *  $_[1] },
  '^'   => sub { check_num_args('^',  @_) && $_[0] ** $_[1] },
  '%'   => sub { check_num_args('%',  @_) && $_[0] %  $_[1] }};

sub tokenize {
  my @chars = split //, shift;
  my ($t, @tokens) = ('');
  while (defined(my $c = shift @chars)) {
    if ($c eq '"') { # string
      push @tokens, $t if $t; $t = '';
      while (defined($c = shift @chars)) {
        if ($c eq '"') { my $str = $t; push @tokens, \$str; $t = '';last }
        else { $t .= $c }
      } die "Non-terminated string\n" if $t;
    } elsif ($c eq ';') { # single line comment
      push @tokens, $t if length $t;
      while (@chars && shift @chars ne "\n") { next }
    } elsif ($c =~ /[\s'()]/) { # delimiter
      length $t && push(@tokens, $t) && ($t = '');
      push @tokens, $c if $c =~ /\S/;
    } else { $t .= $c }}
    \@tokens }

sub parse {
  my $t = shift @{$_[0]};
  if    (!defined $t || $t eq ')') { () }
  elsif ($t eq '(')                { [ parse(@_) ], parse(@_) }
  elsif ($t eq 'nil')              { undef, parse(@_) }
  else                             { $t, parse(@_) }}

sub expand {
  return unless @{$_[0]};
  my $n = shift @{$_[0]};
  if    (aref($n))            { [ expand($n) ], expand(@_) }
  elsif ($n && $n eq "'")     { ['quote', shift @{$_[0]}], expand(@_) }
  else                        { $n, expand(@_) }}

sub aref { ref $_[0] eq 'ARRAY' }
sub nil  { !defined $_[0] || aref(@_) && @{$_[0]} == 0 }
sub atom { nil(@_) || !aref(@_) }
sub list { nil(@_) || aref(@_) }
sub num  { looks_like_number($_[0]) }
sub str  { ref $_[0] eq 'SCALAR' }
sub fun  { ref $_[0] eq 'CODE' }

sub equal {
  my ($x, $y) = @_;
  if    (nil($x))            { nil($y) }
  elsif (num($x) && num($y)) { $x == $y }
  elsif (str($x) && str($y)) { $$x eq $$y }
  else                       { "$x" eq "$y" }} # stringified memory location

sub evaluate {
  my ($expr, $env) = @_;
  if (nil($expr)) {
    undef; # collapse () and nil into one value
  } elsif (num($expr) || str($expr) || fun($expr)) {
    $expr;
  } elsif (!list($expr)) { # a symbol
    die "Symbol '$expr' is undefined\n" unless exist($expr, $env);
    find($expr, $env);
  } else {
    my $func = shift @$expr;
    if ($func eq 'fun') {
      new_fun($expr, $env);
    } elsif ($func eq 'quote') {
      @$expr;
    } elsif ($func eq 'if') {
      die sprintf "'if' needs 3 args but got %d\n", 0 + @$expr if @$expr != 3;
      my ($cond, $then) = splice @$expr, 0, 2;
      ($cond) = evaluate($cond, $env); # always eval in list context
      if (!nil($cond)) { evaluate($then, $env) }
      else { evaluate(shift @$expr, $env) }
    } elsif ($func eq 'set') {
      die "'set' needs an even number of key/value pairs\n" if @$expr % 2;
      while (my $k = shift @$expr) {
        die "Symbol '$k' is already set\n" if exists $env->{$k};
        my @v = evaluate(shift @$expr, $env); # always eval in list context
        die "'set' evaluated '$k' to multiple values\n" if @v > 1;
        die "'set' evaluated '$k' to nothing!\n" if @v == 0;
        $env->{$k} = $v[0];
      }
      (); # set returns nothing
    } else {
      die "Function '$func' is undefined\n" unless exist($func, $env);
      my $value = find($func, $env);
      if (fun($value)) {
        $value->(map { evaluate($_, $env) } @$expr);
      } else {
        die sprintf "Expected a function but '%s' resolves to '%s'\n",
          $func, stringify($value)}}}}

sub new_fun {
  my ($expr, $env) = @_;
  my $params = shift @$expr; # no evaluation of fun signatures
  die "anonymous 'fun' declaration needs a params list\n"
    unless aref($params) && @$params;
  die "anonymous 'fun' declaration needs a body\n" unless @$expr;
  sub {
    my $scope = check_args('anon', $params, @_);
    $scope->{OUTER} = $env;
    my $body = safeclone($expr);
    map { evaluate($_, $scope) } @$body}}

sub check_args {
  my ($name, $params, @args, %scope) = @_;
  for my $p (@$params) {
    die "Missing arg for the $name function param '$p'\n" unless @args;
    my $v = shift @args;
    if (substr($p, 0, 1) eq '@') {
      die sprintf "Fun $name param '$p' didn't get a list type: '%s'\n",
        stringify($v) if !list($v);
    } else {
      die sprintf "Fun $name param '$p' didn't get an atom type: '%s'\n",
        stringify($v) if !atom($v);
    }
    $scope{$p} = $v;
  }
  die sprintf "Excess args (%s) passed to $name function\n",
    join ',', map { stringify($_) } @args if @args;
  \%scope}

sub check_num_args {
  check_args($_[0], ['x','y'], @_[1..$#_]);
  die sprintf "'%s' operates on nums but got (%s)\n", $_[0],
    join ',', map { stringify($_) } @_[1..$#_]
    unless @_ - 1 == grep { looks_like_number($_) } @_[1..$#_] }

sub stringify {
  join ',', map {
    if    (nil($_))  { 'nil' }
    elsif (str($_))  { "\"$$_\"" }
    elsif (num($_))  { $_ }
    elsif (fun($_))  { 'fun' }
    elsif (list($_)) { sprintf '(%s)', join ',', map { stringify($_) } @$_ }
    else             { die "Can't stringify $_" } } @_ }

sub exist {
  my ($k, $env) = @_;
  if    ($k && exists $env->{$k})   { 1 }
  elsif (my $outer = $env->{OUTER}) { exist($k, $outer) }}

sub find {
  my ($k, $env) = @_;
  if (exists $env->{$k}){ safeclone($env->{$k}) }
  elsif (my $outer = $env->{OUTER}) { find($k, $outer) }}

sub safeclone {
  my $v = shift;
  if    (aref($v))           { [ map { safeclone($_) } @$v ] }
  elsif (fun($v) || !ref $v) { $v }
  else                       { dclone($v) }}

sub run {
  my ($self, $env, $code) = @_;
  my $tokens = tokenize($code);
  my @ast = parse([@$tokens]);
  my @expanded = map { [expand($_)] } @ast;
  evaluate($_, $env) for @expanded}

__PACKAGE__->run($ENV, join ' ', <DATA>, <>) unless caller;
__DATA__
(set id    (fun (x) x)
     &&    (fun (x y) (if x y nil))
     ||    (fun (x y) (if x x y))
     map   (fun (f @l)
                (set h (car @l) t (cdr @l))
                (cons (f h) (if t (map f t) '())))
     grep  (fun (f @l)
                 (set h (car @l) t (cdr @l))
                 (++ (if (f h) (cons h '()) nil)
                     (if t (grep f t) nil)))
     sort  (fun (@nums)
                (set h (car @nums)
                     t (cdr @nums)
                     lt (if t (grep (fun (n) (<  n h)) t) nil)
                     ge (if t (grep (fun (n) (>= n h)) t) nil))
                (if @nums (++ (sort lt) (cons h (sort ge))) nil))
     foldl (fun (f i @l)
                (set h (car @l) t (cdr @l))
                (if @l (foldl f (f i h) t) i))
     and   (fun (@l) (foldl && 1 @l))
     or    (fun (@l) (foldl || nil @l)))

